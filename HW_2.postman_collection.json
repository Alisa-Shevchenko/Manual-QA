{
	"info": {
		"_postman_id": "e1fd9be6-34dd-4607-b8f8-cb3db6f321af",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () \r",
							"{\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"var req =request.data;\r",
							"//4.Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name test\", function () {\r",
							"pm.expect(resp.name).to.eql(\"Alisa\");\r",
							"});\r",
							"//5.Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age test\", function () {\r",
							"pm.expect(resp.age).to.eql(\"26\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary test\", function () {\r",
							"pm.expect(resp.salary).to.eql(500);\r",
							"});\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name req test\", function () {\r",
							"pm.expect(req.name).to.eql(resp.name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age req test\", function () {\r",
							"pm.expect(req.age).to.eql(resp.age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary req test\", function () {\r",
							"pm.expect(parseInt(req.salary)).to.eql(resp.salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary*4\", function () {\r",
							"pm.expect(req.salary*4).to.eql(2000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alisa",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    \r",
							"var respData = JSON.parse(responseBody);\r",
							"\r",
							"//4.Спарсить request.\r",
							"\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"\r",
							"console.log(reqData)\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"resp_name=req_name\", function () {\r",
							"pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"resp_age=req_name\", function () {\r",
							"pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"resp_salary=req_salary\", function () {\r",
							"pm.expect(respData.salary).to.eql(parseInt(reqData.salary));\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(respData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Check dog\", () => {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property('name')\r",
							"})\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Check dog_1\", () => {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property('age')\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Luky\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.include(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"dogs age\", function () {\r",
							"pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Alisa&age=26&salary=500",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alisa"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var respData = JSON.parse(responseBody);\r",
							"\r",
							"//4. Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_name=req_name\", function () {\r",
							"pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"resp_age=req_age\", function () {\r",
							"pm.expect(respData.age).to.eql(parseInt(reqData.age));\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(respData.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respData.salary[0])\r",
							"\r",
							"//10.Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_0\", function () {\r",
							"pm.expect(respData.salary[0]).to.eql(parseInt(reqData.salary));\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_1\", function () {\r",
							"pm.expect(parseInt(respData.salary[1])).to.eql(reqData.salary*2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_2\", function () {\r",
							"pm.expect(parseInt(respData.salary[2])).to.eql(reqData.salary*3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",reqData.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\",reqData.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",reqData.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var salary=respData.salary\r",
							"for (var i=0; i<salary.lenght;i=i+1){\r",
							"    console.log(salary[i])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Alisa&age=26&salary=500",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alisa"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req =request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check resp\", () => {\r",
							"    pm.expect(resp).to.have.property('start_qa_salary')\r",
							"})\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check resp_1\", () => {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check resp_2\", () => {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check resp_3\", () => {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"\r",
							"//12.Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check resp_4\", () => {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check resp_4\", () => {\r",
							"    pm.expect(resp).to.have.property('person')\r",
							"})\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"req_salary=start_qa_salary\", function () {\r",
							"    pm.expect(parseInt(req.salary)).to.eql(resp.start_qa_salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"req_salary*2=qa_salary_after_6_months\", function () {\r",
							"pm.expect(req.salary*2).to.eql(resp.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"req_salary*2.7=qa_salary_after_12_months\", function () {\r",
							"pm.expect(req.salary*2.7).to.eql(resp.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"req.salary*3.3=qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"req.salary*3.8=qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);\r",
							"});\r",
							"\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person_salary\", function () {\r",
							"pm.expect(resp.person.u_name[1]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person_age\", function () {\r",
							"pm.expect(resp.person.u_age).to.eql(parseInt(req.age));\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"req_salary*4.2=u_salary_5_years\", function () {\r",
							"pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"var person =resp.person;\r",
							"console.log(person_list);\r",
							"var person_list=[];\r",
							"var person_list=person\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}